<?php

namespace App\Services;


use App\Models\Good\Good;
use App\Models\RefreshLog;
use App\Models\User;
use App\Notifications\MailNotification;
use App\Notifications\TelegramNotification;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;

class GoodYcOperations
{
    public function refreshAll()
    {
        ini_set('max_execution_time', 3600);

        DB::transaction(function () { // –ß—Ç–æ–±—ã –Ω–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–≥–æ

            $yc_goods = [];
            $changed_after = '2023-01-05T12:00:00';
            for ($page = 0; $page <= 10; $page++) {
                // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                $request = (new YcApiRequest)->make_request('goods', '?count=100&changed_after=' . $changed_after . '&page=' . $page);
                if ($request) {
                    $yc_goods = array_merge($yc_goods, $request);
                } else {
                    break;
                }
            }

            $desiredGoodId = 28701480;

            $filteredItems = array_filter($yc_goods, function($item) use ($desiredGoodId) {
                return $item['good_id'] == $desiredGoodId;
            });

            dd($filteredItems);


            dd($yc_goods[0]['actual_amounts']);

            $this->found_yc_goods = null;
            $updated_goods = [];
            $created_goods = [];

            foreach ($yc_goods as $yc_good) { // –ò–¥–µ–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º YCLIENTS
                $good_found = Good::where('yc_id', $yc_good['good_id'])->first();

                $storage_id_key = array_search(ENV('YCLIENTS_SHOP_STORAGE'), array_column($yc_good['actual_amounts'], 'storage_id'));

                $yc_actual_amounts = $yc_good['actual_amounts'][$storage_id_key]['amount'] ?? null;

                if ($good_found ?? null) { // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä
                    if ($good_found['name'] <> $yc_good['title'] || $good_found['yc_price'] <> $yc_good['cost'] || $good_found['yc_category'] <> $yc_good['category'] || $good_found['yc_actual_amount'] <> $yc_actual_amounts) {

                        array_push($updated_goods, $yc_good['title']);
                        $good_found->update([
                            'yc_title' => $yc_good['title'],
                            'yc_price' => $yc_good['cost'],
                            'yc_category' => $yc_good['category'],
                            'yc_actual_amount' => $yc_actual_amounts,
                            'name' => $yc_good['title'],
                        ]);

                        $description['–û–±–Ω–æ–≤–∏–ª–∏ –∏–Ω—Ñ–æ –∏–∑ YClients'][] = [
                            'yc_id' => $yc_good['good_id'],
                            '–ù–∞–∑–≤–∞–Ω–∏–µ' => $yc_good['title'],
                            '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ' => $yc_actual_amounts
                        ];

                    }
                } else { // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    $this->found_yc_goods[] = [
                        'yc_id' => $yc_good['good_id'],
                        'yc_title' => $yc_good['title'],
                        'yc_price' => $yc_good['cost'],
                        'yc_category' => $yc_good['category'],
                        'yc_actual_amount' => $yc_actual_amounts,
                        'last_change_date' => substr($yc_good['last_change_date'], 0, 10),
                        'yc_active' => 0
                    ];


                }
            }

            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑ –Ω–æ–≤—ã—Ö
            $unique_array = [];
            if ($this->found_yc_goods ?? null) {
                foreach ($this->found_yc_goods as $element) {
                    $hash = $element['yc_id'];
                    $unique_array[$hash] = $element;
                }
                $this->found_yc_goods = array_values($unique_array);
            }

            if ($this->found_yc_goods ?? null) {
                foreach ($this->found_yc_goods as $found_yc_good) {

                    array_push($created_goods, $found_yc_good['yc_title']);

                    Good::create([
                        'yc_id' => $found_yc_good['yc_id'],
                        'yc_title' => $found_yc_good['yc_title'],
                        'yc_price' => $found_yc_good['yc_price'],
                        'yc_category' => $found_yc_good['yc_category'],
                        'yc_actual_amount' => $found_yc_good['yc_actual_amount'],
                        'flg_active' => 0,
                        'name' => $found_yc_good['yc_title'],
                    ]);

                    $description['–î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ YClients'][] = [
                        'yc_id' => $found_yc_good['yc_id'],
                        '–ù–∞–∑–≤–∞–Ω–∏–µ' => $found_yc_good['yc_title'],
                        '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ' => $found_yc_good['yc_actual_amount']
                    ];


                }
            }


            $created_goods = count($created_goods);
            $updated_goods = count($updated_goods);
            $title = 'üì° –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã! üì°';
            $text = "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å YClients. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: *{$created_goods}*\n –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: *{$updated_goods}*.";


            RefreshLog::create([
                'model' => '–¢–æ–≤–∞—Ä—ã',
                'type' => '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å YClients',
                'summary' => $text,
                'description' => json_encode($description) ?? '–ù–µ –Ω–∞—à–ª–∏, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å'
            ]);

            // –ü–æ—Å—ã–ª–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–º
            \Illuminate\Support\Facades\Notification::route('telegram', env('TELEGRAM_CHAT_ID'))
                ->notify(new TelegramNotification($title, $text, null, null));

        });
    }
}
